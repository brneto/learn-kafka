import static org.gradle.api.file.DuplicatesStrategy.EXCLUDE

plugins {
    id 'java'
    id 'application'
    id 'io.freefair.lombok'
    id 'com.gorylenko.gradle-git-properties'
    id 'com.adarshr.test-logger'
}

group 'com.zinkworks.connectors'
version '0.0.1-SNAPSHOT'
description 'Kafka connector demo application'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    // Kafka
    implementation 'org.apache.kafka:connect-api:3.1.0'

    // Logging
    implementation 'ch.qos.logback:logback-classic:1.2.11'

    // Test
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

mainClassName = 'com.zinkworks.connectors.demo.App'

testlogger {
    theme 'mocha'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
    logLevel 'lifecycle'
}

test {
    useJUnitPlatform()
}

jar {
    archiveBaseName = 'connect-file-event-source'
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }
    duplicatesStrategy EXCLUDE
    from {
        configurations.runtimeClasspath
                .findAll { it.name.endsWith('jar') }
                .collect { zipTree it }
    }
}

task deploy {
    dependsOn build
    doLast {
        String targetPath = 'kafka1:/opt/bitnami/kafka'
        exec {
            String resourcePath = sourceSets.main.output.resourcesDir
            String resourceName = 'connect-file-event-source.properties'

            description "docker cp $resourcePath/$resourceName $targetPath/config"
            executable 'docker'
            args 'cp', "$resourcePath/$resourceName", "$targetPath/config"
        }
        exec {
            Directory archivePath = jar.destinationDirectory.get()
            String archiveName = jar.archiveFileName.get()

            description "docker cp $archivePath/$archiveName $targetPath/libs"
            executable 'docker'
            args 'cp', "$archivePath/$archiveName", "$targetPath/libs"
        }
    }
//    println "baseName: $archivesBaseName"
//    println "archiveBaseName: ${jar.archiveBaseName.get()}"
//    println "archiveVersion: ${jar.archiveVersion.get()}"
//    println "archiveExtension: ${jar.archiveExtension.get()}"
//    println "filename: ${jar.archiveFileName.get()}"
//    println "path: ${jar.destinationDirectory.get()}"
//    println "projectPath: $archivePath"
//    println "$archivePath / $archiveName"
//    println "$resourcePath"
}
